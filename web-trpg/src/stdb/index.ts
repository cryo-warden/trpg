// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Act } from "./act_reducer.ts";
export { Act };
import { ConsumeObserverComponents } from "./consume_observer_components_reducer.ts";
export { ConsumeObserverComponents };
import { Damage } from "./damage_reducer.ts";
export { Damage };
import { DeleteTarget } from "./delete_target_reducer.ts";
export { DeleteTarget };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { RunSystem } from "./run_system_reducer.ts";
export { RunSystem };
import { Target } from "./target_reducer.ts";
export { Target };

// Import and reexport all table handle types
import { ActionHotkeysComponentsTableHandle } from "./action_hotkeys_components_table.ts";
export { ActionHotkeysComponentsTableHandle };
import { ActionNamesTableHandle } from "./action_names_table.ts";
export { ActionNamesTableHandle };
import { ActionOptionsComponentsTableHandle } from "./action_options_components_table.ts";
export { ActionOptionsComponentsTableHandle };
import { ActionStateComponentsTableHandle } from "./action_state_components_table.ts";
export { ActionStateComponentsTableHandle };
import { ActionStepsTableHandle } from "./action_steps_table.ts";
export { ActionStepsTableHandle };
import { ActionsTableHandle } from "./actions_table.ts";
export { ActionsTableHandle };
import { ActionsComponentsTableHandle } from "./actions_components_table.ts";
export { ActionsComponentsTableHandle };
import { AllegianceComponentsTableHandle } from "./allegiance_components_table.ts";
export { AllegianceComponentsTableHandle };
import { AppearanceFeaturesTableHandle } from "./appearance_features_table.ts";
export { AppearanceFeaturesTableHandle };
import { AppearanceFeaturesComponentsTableHandle } from "./appearance_features_components_table.ts";
export { AppearanceFeaturesComponentsTableHandle };
import { AttackComponentsTableHandle } from "./attack_components_table.ts";
export { AttackComponentsTableHandle };
import { BaselineComponentsTableHandle } from "./baseline_components_table.ts";
export { BaselineComponentsTableHandle };
import { BaselinesTableHandle } from "./baselines_table.ts";
export { BaselinesTableHandle };
import { EarlyEventsTableHandle } from "./early_events_table.ts";
export { EarlyEventsTableHandle };
import { EnAppearanceFeaturesTableHandle } from "./en_appearance_features_table.ts";
export { EnAppearanceFeaturesTableHandle };
import { EntitiesTableHandle } from "./entities_table.ts";
export { EntitiesTableHandle };
import { EntityDeactivationTimerComponentsTableHandle } from "./entity_deactivation_timer_components_table.ts";
export { EntityDeactivationTimerComponentsTableHandle };
import { EntityProminenceComponentsTableHandle } from "./entity_prominence_components_table.ts";
export { EntityProminenceComponentsTableHandle };
import { EpComponentsTableHandle } from "./ep_components_table.ts";
export { EpComponentsTableHandle };
import { HpComponentsTableHandle } from "./hp_components_table.ts";
export { HpComponentsTableHandle };
import { IdentityInactiveEntitiesTableHandle } from "./identity_inactive_entities_table.ts";
export { IdentityInactiveEntitiesTableHandle };
import { LateEventsTableHandle } from "./late_events_table.ts";
export { LateEventsTableHandle };
import { LocationComponentsTableHandle } from "./location_components_table.ts";
export { LocationComponentsTableHandle };
import { LocationMapComponentsTableHandle } from "./location_map_components_table.ts";
export { LocationMapComponentsTableHandle };
import { MiddleEventsTableHandle } from "./middle_events_table.ts";
export { MiddleEventsTableHandle };
import { NameComponentsTableHandle } from "./name_components_table.ts";
export { NameComponentsTableHandle };
import { NamedInactiveEntitiesTableHandle } from "./named_inactive_entities_table.ts";
export { NamedInactiveEntitiesTableHandle };
import { ObservableEventsTableHandle } from "./observable_events_table.ts";
export { ObservableEventsTableHandle };
import { ObserverComponentsTableHandle } from "./observer_components_table.ts";
export { ObserverComponentsTableHandle };
import { PathComponentsTableHandle } from "./path_components_table.ts";
export { PathComponentsTableHandle };
import { PlayerControllerComponentsTableHandle } from "./player_controller_components_table.ts";
export { PlayerControllerComponentsTableHandle };
import { QueuedActionStateComponentsTableHandle } from "./queued_action_state_components_table.ts";
export { QueuedActionStateComponentsTableHandle };
import { RealizedMapComponentsTableHandle } from "./realized_map_components_table.ts";
export { RealizedMapComponentsTableHandle };
import { RngSeedComponentsTableHandle } from "./rng_seed_components_table.ts";
export { RngSeedComponentsTableHandle };
import { SystemTimersTableHandle } from "./system_timers_table.ts";
export { SystemTimersTableHandle };
import { TargetComponentsTableHandle } from "./target_components_table.ts";
export { TargetComponentsTableHandle };
import { TraitsTableHandle } from "./traits_table.ts";
export { TraitsTableHandle };
import { TraitsComponentsTableHandle } from "./traits_components_table.ts";
export { TraitsComponentsTableHandle };
import { UnrealizedMapComponentsTableHandle } from "./unrealized_map_components_table.ts";
export { UnrealizedMapComponentsTableHandle };

// Import and reexport all types
import { Action } from "./action_type.ts";
export { Action };
import { ActionEffect } from "./action_effect_type.ts";
export { ActionEffect };
import { ActionHotkey } from "./action_hotkey_type.ts";
export { ActionHotkey };
import { ActionHotkeysComponent } from "./action_hotkeys_component_type.ts";
export { ActionHotkeysComponent };
import { ActionName } from "./action_name_type.ts";
export { ActionName };
import { ActionOption } from "./action_option_type.ts";
export { ActionOption };
import { ActionOptionsComponent } from "./action_options_component_type.ts";
export { ActionOptionsComponent };
import { ActionStateComponent } from "./action_state_component_type.ts";
export { ActionStateComponent };
import { ActionStep } from "./action_step_type.ts";
export { ActionStep };
import { ActionType } from "./action_type_type.ts";
export { ActionType };
import { ActionsComponent } from "./actions_component_type.ts";
export { ActionsComponent };
import { AllegianceComponent } from "./allegiance_component_type.ts";
export { AllegianceComponent };
import { AppearanceFeature } from "./appearance_feature_type.ts";
export { AppearanceFeature };
import { AppearanceFeatureType } from "./appearance_feature_type_type.ts";
export { AppearanceFeatureType };
import { AppearanceFeaturesComponent } from "./appearance_features_component_type.ts";
export { AppearanceFeaturesComponent };
import { AttackComponent } from "./attack_component_type.ts";
export { AttackComponent };
import { Baseline } from "./baseline_type.ts";
export { Baseline };
import { BaselineComponent } from "./baseline_component_type.ts";
export { BaselineComponent };
import { Buff } from "./buff_type.ts";
export { Buff };
import { ComponentSet } from "./component_set_type.ts";
export { ComponentSet };
import { Entity } from "./entity_type.ts";
export { Entity };
import { EntityDeactivationTimerComponent } from "./entity_deactivation_timer_component_type.ts";
export { EntityDeactivationTimerComponent };
import { EntityEvent } from "./entity_event_type.ts";
export { EntityEvent };
import { EntityProminenceComponent } from "./entity_prominence_component_type.ts";
export { EntityProminenceComponent };
import { EpComponent } from "./ep_component_type.ts";
export { EpComponent };
import { EventType } from "./event_type_type.ts";
export { EventType };
import { HpComponent } from "./hp_component_type.ts";
export { HpComponent };
import { IdentityInactiveEntity } from "./identity_inactive_entity_type.ts";
export { IdentityInactiveEntity };
import { LocationComponent } from "./location_component_type.ts";
export { LocationComponent };
import { LocationMapComponent } from "./location_map_component_type.ts";
export { LocationMapComponent };
import { MapComponent } from "./map_component_type.ts";
export { MapComponent };
import { MapLayout } from "./map_layout_type.ts";
export { MapLayout };
import { NameComponent } from "./name_component_type.ts";
export { NameComponent };
import { NamedInactiveEntity } from "./named_inactive_entity_type.ts";
export { NamedInactiveEntity };
import { ObserverComponent } from "./observer_component_type.ts";
export { ObserverComponent };
import { PathComponent } from "./path_component_type.ts";
export { PathComponent };
import { PlayerControllerComponent } from "./player_controller_component_type.ts";
export { PlayerControllerComponent };
import { RngSeedComponent } from "./rng_seed_component_type.ts";
export { RngSeedComponent };
import { StatBlock } from "./stat_block_type.ts";
export { StatBlock };
import { SystemTimer } from "./system_timer_type.ts";
export { SystemTimer };
import { TargetComponent } from "./target_component_type.ts";
export { TargetComponent };
import { Trait } from "./trait_type.ts";
export { Trait };
import { TraitsComponent } from "./traits_component_type.ts";
export { TraitsComponent };

const REMOTE_MODULE = {
  tables: {
    action_hotkeys_components: {
      tableName: "action_hotkeys_components",
      rowType: ActionHotkeysComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    action_names: {
      tableName: "action_names",
      rowType: ActionName.getTypeScriptAlgebraicType(),
      primaryKey: "actionId",
    },
    action_options_components: {
      tableName: "action_options_components",
      rowType: ActionOptionsComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    action_state_components: {
      tableName: "action_state_components",
      rowType: ActionStateComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    action_steps: {
      tableName: "action_steps",
      rowType: ActionStep.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    actions: {
      tableName: "actions",
      rowType: Action.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    actions_components: {
      tableName: "actions_components",
      rowType: ActionsComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    allegiance_components: {
      tableName: "allegiance_components",
      rowType: AllegianceComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    appearance_features: {
      tableName: "appearance_features",
      rowType: AppearanceFeature.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    appearance_features_components: {
      tableName: "appearance_features_components",
      rowType: AppearanceFeaturesComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    attack_components: {
      tableName: "attack_components",
      rowType: AttackComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    baseline_components: {
      tableName: "baseline_components",
      rowType: BaselineComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    baselines: {
      tableName: "baselines",
      rowType: Baseline.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    early_events: {
      tableName: "early_events",
      rowType: EntityEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    en_appearance_features: {
      tableName: "en_appearance_features",
      rowType: AppearanceFeature.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    entities: {
      tableName: "entities",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    entity_deactivation_timer_components: {
      tableName: "entity_deactivation_timer_components",
      rowType: EntityDeactivationTimerComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    entity_prominence_components: {
      tableName: "entity_prominence_components",
      rowType: EntityProminenceComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    ep_components: {
      tableName: "ep_components",
      rowType: EpComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    hp_components: {
      tableName: "hp_components",
      rowType: HpComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    identity_inactive_entities: {
      tableName: "identity_inactive_entities",
      rowType: IdentityInactiveEntity.getTypeScriptAlgebraicType(),
    },
    late_events: {
      tableName: "late_events",
      rowType: EntityEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    location_components: {
      tableName: "location_components",
      rowType: LocationComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    location_map_components: {
      tableName: "location_map_components",
      rowType: LocationMapComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    middle_events: {
      tableName: "middle_events",
      rowType: EntityEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    name_components: {
      tableName: "name_components",
      rowType: NameComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    named_inactive_entities: {
      tableName: "named_inactive_entities",
      rowType: NamedInactiveEntity.getTypeScriptAlgebraicType(),
      primaryKey: "prefabName",
    },
    observable_events: {
      tableName: "observable_events",
      rowType: EntityEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    observer_components: {
      tableName: "observer_components",
      rowType: ObserverComponent.getTypeScriptAlgebraicType(),
    },
    path_components: {
      tableName: "path_components",
      rowType: PathComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    player_controller_components: {
      tableName: "player_controller_components",
      rowType: PlayerControllerComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    queued_action_state_components: {
      tableName: "queued_action_state_components",
      rowType: ActionStateComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    realized_map_components: {
      tableName: "realized_map_components",
      rowType: MapComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    rng_seed_components: {
      tableName: "rng_seed_components",
      rowType: RngSeedComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    system_timers: {
      tableName: "system_timers",
      rowType: SystemTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    target_components: {
      tableName: "target_components",
      rowType: TargetComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    traits: {
      tableName: "traits",
      rowType: Trait.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    traits_components: {
      tableName: "traits_components",
      rowType: TraitsComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    unrealized_map_components: {
      tableName: "unrealized_map_components",
      rowType: MapComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
  },
  reducers: {
    act: {
      reducerName: "act",
      argsType: Act.getTypeScriptAlgebraicType(),
    },
    consume_observer_components: {
      reducerName: "consume_observer_components",
      argsType: ConsumeObserverComponents.getTypeScriptAlgebraicType(),
    },
    damage: {
      reducerName: "damage",
      argsType: Damage.getTypeScriptAlgebraicType(),
    },
    delete_target: {
      reducerName: "delete_target",
      argsType: DeleteTarget.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    run_system: {
      reducerName: "run_system",
      argsType: RunSystem.getTypeScriptAlgebraicType(),
    },
    target: {
      reducerName: "target",
      argsType: Target.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Act", args: Act }
| { name: "ConsumeObserverComponents", args: ConsumeObserverComponents }
| { name: "Damage", args: Damage }
| { name: "DeleteTarget", args: DeleteTarget }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "RunSystem", args: RunSystem }
| { name: "Target", args: Target }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  act(actionId: bigint, targetEntityId: bigint) {
    const __args = { actionId, targetEntityId };
    let __writer = new BinaryWriter(1024);
    Act.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("act", __argsBuffer, this.setCallReducerFlags.actFlags);
  }

  onAct(callback: (ctx: ReducerEventContext, actionId: bigint, targetEntityId: bigint) => void) {
    this.connection.onReducer("act", callback);
  }

  removeOnAct(callback: (ctx: ReducerEventContext, actionId: bigint, targetEntityId: bigint) => void) {
    this.connection.offReducer("act", callback);
  }

  consumeObserverComponents() {
    this.connection.callReducer("consume_observer_components", new Uint8Array(0), this.setCallReducerFlags.consumeObserverComponentsFlags);
  }

  onConsumeObserverComponents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("consume_observer_components", callback);
  }

  removeOnConsumeObserverComponents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("consume_observer_components", callback);
  }

  damage(entityId: bigint, damage: number) {
    const __args = { entityId, damage };
    let __writer = new BinaryWriter(1024);
    Damage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("damage", __argsBuffer, this.setCallReducerFlags.damageFlags);
  }

  onDamage(callback: (ctx: ReducerEventContext, entityId: bigint, damage: number) => void) {
    this.connection.onReducer("damage", callback);
  }

  removeOnDamage(callback: (ctx: ReducerEventContext, entityId: bigint, damage: number) => void) {
    this.connection.offReducer("damage", callback);
  }

  deleteTarget() {
    this.connection.callReducer("delete_target", new Uint8Array(0), this.setCallReducerFlags.deleteTargetFlags);
  }

  onDeleteTarget(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("delete_target", callback);
  }

  removeOnDeleteTarget(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("delete_target", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  runSystem(timer: SystemTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RunSystem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("run_system", __argsBuffer, this.setCallReducerFlags.runSystemFlags);
  }

  onRunSystem(callback: (ctx: ReducerEventContext, timer: SystemTimer) => void) {
    this.connection.onReducer("run_system", callback);
  }

  removeOnRunSystem(callback: (ctx: ReducerEventContext, timer: SystemTimer) => void) {
    this.connection.offReducer("run_system", callback);
  }

  target(targetEntityId: bigint) {
    const __args = { targetEntityId };
    let __writer = new BinaryWriter(1024);
    Target.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("target", __argsBuffer, this.setCallReducerFlags.targetFlags);
  }

  onTarget(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.onReducer("target", callback);
  }

  removeOnTarget(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.offReducer("target", callback);
  }

}

export class SetReducerFlags {
  actFlags: CallReducerFlags = 'FullUpdate';
  act(flags: CallReducerFlags) {
    this.actFlags = flags;
  }

  consumeObserverComponentsFlags: CallReducerFlags = 'FullUpdate';
  consumeObserverComponents(flags: CallReducerFlags) {
    this.consumeObserverComponentsFlags = flags;
  }

  damageFlags: CallReducerFlags = 'FullUpdate';
  damage(flags: CallReducerFlags) {
    this.damageFlags = flags;
  }

  deleteTargetFlags: CallReducerFlags = 'FullUpdate';
  deleteTarget(flags: CallReducerFlags) {
    this.deleteTargetFlags = flags;
  }

  runSystemFlags: CallReducerFlags = 'FullUpdate';
  runSystem(flags: CallReducerFlags) {
    this.runSystemFlags = flags;
  }

  targetFlags: CallReducerFlags = 'FullUpdate';
  target(flags: CallReducerFlags) {
    this.targetFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get actionHotkeysComponents(): ActionHotkeysComponentsTableHandle {
    return new ActionHotkeysComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionHotkeysComponent>(REMOTE_MODULE.tables.action_hotkeys_components));
  }

  get actionNames(): ActionNamesTableHandle {
    return new ActionNamesTableHandle(this.connection.clientCache.getOrCreateTable<ActionName>(REMOTE_MODULE.tables.action_names));
  }

  get actionOptionsComponents(): ActionOptionsComponentsTableHandle {
    return new ActionOptionsComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionOptionsComponent>(REMOTE_MODULE.tables.action_options_components));
  }

  get actionStateComponents(): ActionStateComponentsTableHandle {
    return new ActionStateComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStateComponent>(REMOTE_MODULE.tables.action_state_components));
  }

  get actionSteps(): ActionStepsTableHandle {
    return new ActionStepsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStep>(REMOTE_MODULE.tables.action_steps));
  }

  get actions(): ActionsTableHandle {
    return new ActionsTableHandle(this.connection.clientCache.getOrCreateTable<Action>(REMOTE_MODULE.tables.actions));
  }

  get actionsComponents(): ActionsComponentsTableHandle {
    return new ActionsComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionsComponent>(REMOTE_MODULE.tables.actions_components));
  }

  get allegianceComponents(): AllegianceComponentsTableHandle {
    return new AllegianceComponentsTableHandle(this.connection.clientCache.getOrCreateTable<AllegianceComponent>(REMOTE_MODULE.tables.allegiance_components));
  }

  get appearanceFeatures(): AppearanceFeaturesTableHandle {
    return new AppearanceFeaturesTableHandle(this.connection.clientCache.getOrCreateTable<AppearanceFeature>(REMOTE_MODULE.tables.appearance_features));
  }

  get appearanceFeaturesComponents(): AppearanceFeaturesComponentsTableHandle {
    return new AppearanceFeaturesComponentsTableHandle(this.connection.clientCache.getOrCreateTable<AppearanceFeaturesComponent>(REMOTE_MODULE.tables.appearance_features_components));
  }

  get attackComponents(): AttackComponentsTableHandle {
    return new AttackComponentsTableHandle(this.connection.clientCache.getOrCreateTable<AttackComponent>(REMOTE_MODULE.tables.attack_components));
  }

  get baselineComponents(): BaselineComponentsTableHandle {
    return new BaselineComponentsTableHandle(this.connection.clientCache.getOrCreateTable<BaselineComponent>(REMOTE_MODULE.tables.baseline_components));
  }

  get baselines(): BaselinesTableHandle {
    return new BaselinesTableHandle(this.connection.clientCache.getOrCreateTable<Baseline>(REMOTE_MODULE.tables.baselines));
  }

  get earlyEvents(): EarlyEventsTableHandle {
    return new EarlyEventsTableHandle(this.connection.clientCache.getOrCreateTable<EntityEvent>(REMOTE_MODULE.tables.early_events));
  }

  get enAppearanceFeatures(): EnAppearanceFeaturesTableHandle {
    return new EnAppearanceFeaturesTableHandle(this.connection.clientCache.getOrCreateTable<AppearanceFeature>(REMOTE_MODULE.tables.en_appearance_features));
  }

  get entities(): EntitiesTableHandle {
    return new EntitiesTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entities));
  }

  get entityDeactivationTimerComponents(): EntityDeactivationTimerComponentsTableHandle {
    return new EntityDeactivationTimerComponentsTableHandle(this.connection.clientCache.getOrCreateTable<EntityDeactivationTimerComponent>(REMOTE_MODULE.tables.entity_deactivation_timer_components));
  }

  get entityProminenceComponents(): EntityProminenceComponentsTableHandle {
    return new EntityProminenceComponentsTableHandle(this.connection.clientCache.getOrCreateTable<EntityProminenceComponent>(REMOTE_MODULE.tables.entity_prominence_components));
  }

  get epComponents(): EpComponentsTableHandle {
    return new EpComponentsTableHandle(this.connection.clientCache.getOrCreateTable<EpComponent>(REMOTE_MODULE.tables.ep_components));
  }

  get hpComponents(): HpComponentsTableHandle {
    return new HpComponentsTableHandle(this.connection.clientCache.getOrCreateTable<HpComponent>(REMOTE_MODULE.tables.hp_components));
  }

  get identityInactiveEntities(): IdentityInactiveEntitiesTableHandle {
    return new IdentityInactiveEntitiesTableHandle(this.connection.clientCache.getOrCreateTable<IdentityInactiveEntity>(REMOTE_MODULE.tables.identity_inactive_entities));
  }

  get lateEvents(): LateEventsTableHandle {
    return new LateEventsTableHandle(this.connection.clientCache.getOrCreateTable<EntityEvent>(REMOTE_MODULE.tables.late_events));
  }

  get locationComponents(): LocationComponentsTableHandle {
    return new LocationComponentsTableHandle(this.connection.clientCache.getOrCreateTable<LocationComponent>(REMOTE_MODULE.tables.location_components));
  }

  get locationMapComponents(): LocationMapComponentsTableHandle {
    return new LocationMapComponentsTableHandle(this.connection.clientCache.getOrCreateTable<LocationMapComponent>(REMOTE_MODULE.tables.location_map_components));
  }

  get middleEvents(): MiddleEventsTableHandle {
    return new MiddleEventsTableHandle(this.connection.clientCache.getOrCreateTable<EntityEvent>(REMOTE_MODULE.tables.middle_events));
  }

  get nameComponents(): NameComponentsTableHandle {
    return new NameComponentsTableHandle(this.connection.clientCache.getOrCreateTable<NameComponent>(REMOTE_MODULE.tables.name_components));
  }

  get namedInactiveEntities(): NamedInactiveEntitiesTableHandle {
    return new NamedInactiveEntitiesTableHandle(this.connection.clientCache.getOrCreateTable<NamedInactiveEntity>(REMOTE_MODULE.tables.named_inactive_entities));
  }

  get observableEvents(): ObservableEventsTableHandle {
    return new ObservableEventsTableHandle(this.connection.clientCache.getOrCreateTable<EntityEvent>(REMOTE_MODULE.tables.observable_events));
  }

  get observerComponents(): ObserverComponentsTableHandle {
    return new ObserverComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ObserverComponent>(REMOTE_MODULE.tables.observer_components));
  }

  get pathComponents(): PathComponentsTableHandle {
    return new PathComponentsTableHandle(this.connection.clientCache.getOrCreateTable<PathComponent>(REMOTE_MODULE.tables.path_components));
  }

  get playerControllerComponents(): PlayerControllerComponentsTableHandle {
    return new PlayerControllerComponentsTableHandle(this.connection.clientCache.getOrCreateTable<PlayerControllerComponent>(REMOTE_MODULE.tables.player_controller_components));
  }

  get queuedActionStateComponents(): QueuedActionStateComponentsTableHandle {
    return new QueuedActionStateComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStateComponent>(REMOTE_MODULE.tables.queued_action_state_components));
  }

  get realizedMapComponents(): RealizedMapComponentsTableHandle {
    return new RealizedMapComponentsTableHandle(this.connection.clientCache.getOrCreateTable<MapComponent>(REMOTE_MODULE.tables.realized_map_components));
  }

  get rngSeedComponents(): RngSeedComponentsTableHandle {
    return new RngSeedComponentsTableHandle(this.connection.clientCache.getOrCreateTable<RngSeedComponent>(REMOTE_MODULE.tables.rng_seed_components));
  }

  get systemTimers(): SystemTimersTableHandle {
    return new SystemTimersTableHandle(this.connection.clientCache.getOrCreateTable<SystemTimer>(REMOTE_MODULE.tables.system_timers));
  }

  get targetComponents(): TargetComponentsTableHandle {
    return new TargetComponentsTableHandle(this.connection.clientCache.getOrCreateTable<TargetComponent>(REMOTE_MODULE.tables.target_components));
  }

  get traits(): TraitsTableHandle {
    return new TraitsTableHandle(this.connection.clientCache.getOrCreateTable<Trait>(REMOTE_MODULE.tables.traits));
  }

  get traitsComponents(): TraitsComponentsTableHandle {
    return new TraitsComponentsTableHandle(this.connection.clientCache.getOrCreateTable<TraitsComponent>(REMOTE_MODULE.tables.traits_components));
  }

  get unrealizedMapComponents(): UnrealizedMapComponentsTableHandle {
    return new UnrealizedMapComponentsTableHandle(this.connection.clientCache.getOrCreateTable<MapComponent>(REMOTE_MODULE.tables.unrealized_map_components));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
