// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Act } from "./act_reducer.ts";
export { Act };
import { Damage } from "./damage_reducer.ts";
export { Damage };
import { DeleteTarget } from "./delete_target_reducer.ts";
export { DeleteTarget };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { RunSystem } from "./run_system_reducer.ts";
export { RunSystem };
import { Target } from "./target_reducer.ts";
export { Target };

// Import and reexport all table handle types
import { ActionComponentsTableHandle } from "./action_components_table.ts";
export { ActionComponentsTableHandle };
import { ActionHotkeyComponentsTableHandle } from "./action_hotkey_components_table.ts";
export { ActionHotkeyComponentsTableHandle };
import { ActionNamesTableHandle } from "./action_names_table.ts";
export { ActionNamesTableHandle };
import { ActionOptionComponentsTableHandle } from "./action_option_components_table.ts";
export { ActionOptionComponentsTableHandle };
import { ActionStateComponentTargetsTableHandle } from "./action_state_component_targets_table.ts";
export { ActionStateComponentTargetsTableHandle };
import { ActionStateComponentsTableHandle } from "./action_state_components_table.ts";
export { ActionStateComponentsTableHandle };
import { ActionStepsTableHandle } from "./action_steps_table.ts";
export { ActionStepsTableHandle };
import { ActionsTableHandle } from "./actions_table.ts";
export { ActionsTableHandle };
import { AllegianceComponentsTableHandle } from "./allegiance_components_table.ts";
export { AllegianceComponentsTableHandle };
import { EarlyEventTargetsTableHandle } from "./early_event_targets_table.ts";
export { EarlyEventTargetsTableHandle };
import { EarlyEventsTableHandle } from "./early_events_table.ts";
export { EarlyEventsTableHandle };
import { EntitiesTableHandle } from "./entities_table.ts";
export { EntitiesTableHandle };
import { EpComponentsTableHandle } from "./ep_components_table.ts";
export { EpComponentsTableHandle };
import { HpComponentsTableHandle } from "./hp_components_table.ts";
export { HpComponentsTableHandle };
import { InactiveEntitiesTableHandle } from "./inactive_entities_table.ts";
export { InactiveEntitiesTableHandle };
import { InactiveEpComponentsTableHandle } from "./inactive_ep_components_table.ts";
export { InactiveEpComponentsTableHandle };
import { InactiveHpComponentsTableHandle } from "./inactive_hp_components_table.ts";
export { InactiveHpComponentsTableHandle };
import { InactivePlayerControllerComponentsTableHandle } from "./inactive_player_controller_components_table.ts";
export { InactivePlayerControllerComponentsTableHandle };
import { LateEventTargetsTableHandle } from "./late_event_targets_table.ts";
export { LateEventTargetsTableHandle };
import { LateEventsTableHandle } from "./late_events_table.ts";
export { LateEventsTableHandle };
import { LocationComponentsTableHandle } from "./location_components_table.ts";
export { LocationComponentsTableHandle };
import { NameComponentsTableHandle } from "./name_components_table.ts";
export { NameComponentsTableHandle };
import { ObservableEventTargetsTableHandle } from "./observable_event_targets_table.ts";
export { ObservableEventTargetsTableHandle };
import { ObservableEventsTableHandle } from "./observable_events_table.ts";
export { ObservableEventsTableHandle };
import { PathComponentsTableHandle } from "./path_components_table.ts";
export { PathComponentsTableHandle };
import { PlayerControllerComponentsTableHandle } from "./player_controller_components_table.ts";
export { PlayerControllerComponentsTableHandle };
import { QueuedActionStateComponentTargetsTableHandle } from "./queued_action_state_component_targets_table.ts";
export { QueuedActionStateComponentTargetsTableHandle };
import { QueuedActionStateComponentsTableHandle } from "./queued_action_state_components_table.ts";
export { QueuedActionStateComponentsTableHandle };
import { SystemTimersTableHandle } from "./system_timers_table.ts";
export { SystemTimersTableHandle };
import { TargetComponentsTableHandle } from "./target_components_table.ts";
export { TargetComponentsTableHandle };

// Import and reexport all types
import { Action } from "./action_type.ts";
export { Action };
import { ActionComponent } from "./action_component_type.ts";
export { ActionComponent };
import { ActionEffect } from "./action_effect_type.ts";
export { ActionEffect };
import { ActionHotkeyComponent } from "./action_hotkey_component_type.ts";
export { ActionHotkeyComponent };
import { ActionName } from "./action_name_type.ts";
export { ActionName };
import { ActionOptionComponent } from "./action_option_component_type.ts";
export { ActionOptionComponent };
import { ActionStateComponent } from "./action_state_component_type.ts";
export { ActionStateComponent };
import { ActionStateComponentTarget } from "./action_state_component_target_type.ts";
export { ActionStateComponentTarget };
import { ActionStep } from "./action_step_type.ts";
export { ActionStep };
import { ActionType } from "./action_type_type.ts";
export { ActionType };
import { AllegianceComponent } from "./allegiance_component_type.ts";
export { AllegianceComponent };
import { Entity } from "./entity_type.ts";
export { Entity };
import { EpComponent } from "./ep_component_type.ts";
export { EpComponent };
import { Event } from "./event_type.ts";
export { Event };
import { EventTarget } from "./event_target_type.ts";
export { EventTarget };
import { EventType } from "./event_type_type.ts";
export { EventType };
import { HpComponent } from "./hp_component_type.ts";
export { HpComponent };
import { LocationComponent } from "./location_component_type.ts";
export { LocationComponent };
import { NameComponent } from "./name_component_type.ts";
export { NameComponent };
import { PathComponent } from "./path_component_type.ts";
export { PathComponent };
import { PlayerControllerComponent } from "./player_controller_component_type.ts";
export { PlayerControllerComponent };
import { SystemTimer } from "./system_timer_type.ts";
export { SystemTimer };
import { TargetComponent } from "./target_component_type.ts";
export { TargetComponent };

const REMOTE_MODULE = {
  tables: {
    action_components: {
      tableName: "action_components",
      rowType: ActionComponent.getTypeScriptAlgebraicType(),
    },
    action_hotkey_components: {
      tableName: "action_hotkey_components",
      rowType: ActionHotkeyComponent.getTypeScriptAlgebraicType(),
    },
    action_names: {
      tableName: "action_names",
      rowType: ActionName.getTypeScriptAlgebraicType(),
      primaryKey: "actionId",
    },
    action_option_components: {
      tableName: "action_option_components",
      rowType: ActionOptionComponent.getTypeScriptAlgebraicType(),
    },
    action_state_component_targets: {
      tableName: "action_state_component_targets",
      rowType: ActionStateComponentTarget.getTypeScriptAlgebraicType(),
    },
    action_state_components: {
      tableName: "action_state_components",
      rowType: ActionStateComponent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    action_steps: {
      tableName: "action_steps",
      rowType: ActionStep.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    actions: {
      tableName: "actions",
      rowType: Action.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    allegiance_components: {
      tableName: "allegiance_components",
      rowType: AllegianceComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    early_event_targets: {
      tableName: "early_event_targets",
      rowType: EventTarget.getTypeScriptAlgebraicType(),
    },
    early_events: {
      tableName: "early_events",
      rowType: Event.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    entities: {
      tableName: "entities",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    ep_components: {
      tableName: "ep_components",
      rowType: EpComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    hp_components: {
      tableName: "hp_components",
      rowType: HpComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    inactive_entities: {
      tableName: "inactive_entities",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    inactive_ep_components: {
      tableName: "inactive_ep_components",
      rowType: EpComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    inactive_hp_components: {
      tableName: "inactive_hp_components",
      rowType: HpComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    inactive_player_controller_components: {
      tableName: "inactive_player_controller_components",
      rowType: PlayerControllerComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    late_event_targets: {
      tableName: "late_event_targets",
      rowType: EventTarget.getTypeScriptAlgebraicType(),
    },
    late_events: {
      tableName: "late_events",
      rowType: Event.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    location_components: {
      tableName: "location_components",
      rowType: LocationComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    name_components: {
      tableName: "name_components",
      rowType: NameComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    observable_event_targets: {
      tableName: "observable_event_targets",
      rowType: EventTarget.getTypeScriptAlgebraicType(),
    },
    observable_events: {
      tableName: "observable_events",
      rowType: Event.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    path_components: {
      tableName: "path_components",
      rowType: PathComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    player_controller_components: {
      tableName: "player_controller_components",
      rowType: PlayerControllerComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
    queued_action_state_component_targets: {
      tableName: "queued_action_state_component_targets",
      rowType: ActionStateComponentTarget.getTypeScriptAlgebraicType(),
    },
    queued_action_state_components: {
      tableName: "queued_action_state_components",
      rowType: ActionStateComponent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    system_timers: {
      tableName: "system_timers",
      rowType: SystemTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    target_components: {
      tableName: "target_components",
      rowType: TargetComponent.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
    },
  },
  reducers: {
    act: {
      reducerName: "act",
      argsType: Act.getTypeScriptAlgebraicType(),
    },
    damage: {
      reducerName: "damage",
      argsType: Damage.getTypeScriptAlgebraicType(),
    },
    delete_target: {
      reducerName: "delete_target",
      argsType: DeleteTarget.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    run_system: {
      reducerName: "run_system",
      argsType: RunSystem.getTypeScriptAlgebraicType(),
    },
    target: {
      reducerName: "target",
      argsType: Target.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Act", args: Act }
| { name: "Damage", args: Damage }
| { name: "DeleteTarget", args: DeleteTarget }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "RunSystem", args: RunSystem }
| { name: "Target", args: Target }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  act(actionId: bigint, targetEntityId: bigint) {
    const __args = { actionId, targetEntityId };
    let __writer = new BinaryWriter(1024);
    Act.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("act", __argsBuffer, this.setCallReducerFlags.actFlags);
  }

  onAct(callback: (ctx: ReducerEventContext, actionId: bigint, targetEntityId: bigint) => void) {
    this.connection.onReducer("act", callback);
  }

  removeOnAct(callback: (ctx: ReducerEventContext, actionId: bigint, targetEntityId: bigint) => void) {
    this.connection.offReducer("act", callback);
  }

  damage(entityId: bigint, damage: number) {
    const __args = { entityId, damage };
    let __writer = new BinaryWriter(1024);
    Damage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("damage", __argsBuffer, this.setCallReducerFlags.damageFlags);
  }

  onDamage(callback: (ctx: ReducerEventContext, entityId: bigint, damage: number) => void) {
    this.connection.onReducer("damage", callback);
  }

  removeOnDamage(callback: (ctx: ReducerEventContext, entityId: bigint, damage: number) => void) {
    this.connection.offReducer("damage", callback);
  }

  deleteTarget() {
    this.connection.callReducer("delete_target", new Uint8Array(0), this.setCallReducerFlags.deleteTargetFlags);
  }

  onDeleteTarget(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("delete_target", callback);
  }

  removeOnDeleteTarget(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("delete_target", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  runSystem(timer: SystemTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RunSystem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("run_system", __argsBuffer, this.setCallReducerFlags.runSystemFlags);
  }

  onRunSystem(callback: (ctx: ReducerEventContext, timer: SystemTimer) => void) {
    this.connection.onReducer("run_system", callback);
  }

  removeOnRunSystem(callback: (ctx: ReducerEventContext, timer: SystemTimer) => void) {
    this.connection.offReducer("run_system", callback);
  }

  target(targetEntityId: bigint) {
    const __args = { targetEntityId };
    let __writer = new BinaryWriter(1024);
    Target.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("target", __argsBuffer, this.setCallReducerFlags.targetFlags);
  }

  onTarget(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.onReducer("target", callback);
  }

  removeOnTarget(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.offReducer("target", callback);
  }

}

export class SetReducerFlags {
  actFlags: CallReducerFlags = 'FullUpdate';
  act(flags: CallReducerFlags) {
    this.actFlags = flags;
  }

  damageFlags: CallReducerFlags = 'FullUpdate';
  damage(flags: CallReducerFlags) {
    this.damageFlags = flags;
  }

  deleteTargetFlags: CallReducerFlags = 'FullUpdate';
  deleteTarget(flags: CallReducerFlags) {
    this.deleteTargetFlags = flags;
  }

  runSystemFlags: CallReducerFlags = 'FullUpdate';
  runSystem(flags: CallReducerFlags) {
    this.runSystemFlags = flags;
  }

  targetFlags: CallReducerFlags = 'FullUpdate';
  target(flags: CallReducerFlags) {
    this.targetFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get actionComponents(): ActionComponentsTableHandle {
    return new ActionComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionComponent>(REMOTE_MODULE.tables.action_components));
  }

  get actionHotkeyComponents(): ActionHotkeyComponentsTableHandle {
    return new ActionHotkeyComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionHotkeyComponent>(REMOTE_MODULE.tables.action_hotkey_components));
  }

  get actionNames(): ActionNamesTableHandle {
    return new ActionNamesTableHandle(this.connection.clientCache.getOrCreateTable<ActionName>(REMOTE_MODULE.tables.action_names));
  }

  get actionOptionComponents(): ActionOptionComponentsTableHandle {
    return new ActionOptionComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionOptionComponent>(REMOTE_MODULE.tables.action_option_components));
  }

  get actionStateComponentTargets(): ActionStateComponentTargetsTableHandle {
    return new ActionStateComponentTargetsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStateComponentTarget>(REMOTE_MODULE.tables.action_state_component_targets));
  }

  get actionStateComponents(): ActionStateComponentsTableHandle {
    return new ActionStateComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStateComponent>(REMOTE_MODULE.tables.action_state_components));
  }

  get actionSteps(): ActionStepsTableHandle {
    return new ActionStepsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStep>(REMOTE_MODULE.tables.action_steps));
  }

  get actions(): ActionsTableHandle {
    return new ActionsTableHandle(this.connection.clientCache.getOrCreateTable<Action>(REMOTE_MODULE.tables.actions));
  }

  get allegianceComponents(): AllegianceComponentsTableHandle {
    return new AllegianceComponentsTableHandle(this.connection.clientCache.getOrCreateTable<AllegianceComponent>(REMOTE_MODULE.tables.allegiance_components));
  }

  get earlyEventTargets(): EarlyEventTargetsTableHandle {
    return new EarlyEventTargetsTableHandle(this.connection.clientCache.getOrCreateTable<EventTarget>(REMOTE_MODULE.tables.early_event_targets));
  }

  get earlyEvents(): EarlyEventsTableHandle {
    return new EarlyEventsTableHandle(this.connection.clientCache.getOrCreateTable<Event>(REMOTE_MODULE.tables.early_events));
  }

  get entities(): EntitiesTableHandle {
    return new EntitiesTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entities));
  }

  get epComponents(): EpComponentsTableHandle {
    return new EpComponentsTableHandle(this.connection.clientCache.getOrCreateTable<EpComponent>(REMOTE_MODULE.tables.ep_components));
  }

  get hpComponents(): HpComponentsTableHandle {
    return new HpComponentsTableHandle(this.connection.clientCache.getOrCreateTable<HpComponent>(REMOTE_MODULE.tables.hp_components));
  }

  get inactiveEntities(): InactiveEntitiesTableHandle {
    return new InactiveEntitiesTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.inactive_entities));
  }

  get inactiveEpComponents(): InactiveEpComponentsTableHandle {
    return new InactiveEpComponentsTableHandle(this.connection.clientCache.getOrCreateTable<EpComponent>(REMOTE_MODULE.tables.inactive_ep_components));
  }

  get inactiveHpComponents(): InactiveHpComponentsTableHandle {
    return new InactiveHpComponentsTableHandle(this.connection.clientCache.getOrCreateTable<HpComponent>(REMOTE_MODULE.tables.inactive_hp_components));
  }

  get inactivePlayerControllerComponents(): InactivePlayerControllerComponentsTableHandle {
    return new InactivePlayerControllerComponentsTableHandle(this.connection.clientCache.getOrCreateTable<PlayerControllerComponent>(REMOTE_MODULE.tables.inactive_player_controller_components));
  }

  get lateEventTargets(): LateEventTargetsTableHandle {
    return new LateEventTargetsTableHandle(this.connection.clientCache.getOrCreateTable<EventTarget>(REMOTE_MODULE.tables.late_event_targets));
  }

  get lateEvents(): LateEventsTableHandle {
    return new LateEventsTableHandle(this.connection.clientCache.getOrCreateTable<Event>(REMOTE_MODULE.tables.late_events));
  }

  get locationComponents(): LocationComponentsTableHandle {
    return new LocationComponentsTableHandle(this.connection.clientCache.getOrCreateTable<LocationComponent>(REMOTE_MODULE.tables.location_components));
  }

  get nameComponents(): NameComponentsTableHandle {
    return new NameComponentsTableHandle(this.connection.clientCache.getOrCreateTable<NameComponent>(REMOTE_MODULE.tables.name_components));
  }

  get observableEventTargets(): ObservableEventTargetsTableHandle {
    return new ObservableEventTargetsTableHandle(this.connection.clientCache.getOrCreateTable<EventTarget>(REMOTE_MODULE.tables.observable_event_targets));
  }

  get observableEvents(): ObservableEventsTableHandle {
    return new ObservableEventsTableHandle(this.connection.clientCache.getOrCreateTable<Event>(REMOTE_MODULE.tables.observable_events));
  }

  get pathComponents(): PathComponentsTableHandle {
    return new PathComponentsTableHandle(this.connection.clientCache.getOrCreateTable<PathComponent>(REMOTE_MODULE.tables.path_components));
  }

  get playerControllerComponents(): PlayerControllerComponentsTableHandle {
    return new PlayerControllerComponentsTableHandle(this.connection.clientCache.getOrCreateTable<PlayerControllerComponent>(REMOTE_MODULE.tables.player_controller_components));
  }

  get queuedActionStateComponentTargets(): QueuedActionStateComponentTargetsTableHandle {
    return new QueuedActionStateComponentTargetsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStateComponentTarget>(REMOTE_MODULE.tables.queued_action_state_component_targets));
  }

  get queuedActionStateComponents(): QueuedActionStateComponentsTableHandle {
    return new QueuedActionStateComponentsTableHandle(this.connection.clientCache.getOrCreateTable<ActionStateComponent>(REMOTE_MODULE.tables.queued_action_state_components));
  }

  get systemTimers(): SystemTimersTableHandle {
    return new SystemTimersTableHandle(this.connection.clientCache.getOrCreateTable<SystemTimer>(REMOTE_MODULE.tables.system_timers));
  }

  get targetComponents(): TargetComponentsTableHandle {
    return new TargetComponentsTableHandle(this.connection.clientCache.getOrCreateTable<TargetComponent>(REMOTE_MODULE.tables.target_components));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
