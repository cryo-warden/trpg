// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace Archetype {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type AllegianceArchetype = { tag: "AllegianceArchetype" };
  export type RoomArchetype = { tag: "RoomArchetype" };
  export type PathArchetype = { tag: "PathArchetype" };
  export type ActorArchetype = { tag: "ActorArchetype" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const AllegianceArchetype = { tag: "AllegianceArchetype" };
  export const RoomArchetype = { tag: "RoomArchetype" };
  export const PathArchetype = { tag: "PathArchetype" };
  export const ActorArchetype = { tag: "ActorArchetype" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("AllegianceArchetype", AlgebraicType.createProductType([])),
      new SumTypeVariant("RoomArchetype", AlgebraicType.createProductType([])),
      new SumTypeVariant("PathArchetype", AlgebraicType.createProductType([])),
      new SumTypeVariant("ActorArchetype", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Archetype): void {
      Archetype.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Archetype {
      return Archetype.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `Archetype`.
export type Archetype = Archetype.AllegianceArchetype | Archetype.RoomArchetype | Archetype.PathArchetype | Archetype.ActorArchetype;

export default Archetype;

